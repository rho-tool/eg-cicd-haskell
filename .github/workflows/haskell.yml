name: Cross-Platform Build

on:
  push:
    tags: ['v*']

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            platform: linux-x86_64
          - os: macos-latest
            platform: macos-x86_64
          - os: windows-latest
            platform: windows-x86_64

    runs-on: ${{matrix.os}}

    steps:

    - name: Check out project
      uses: actions/checkout@v4

    - name: Unpack YAML
      run: mv etc/*.yaml* .

    - name: Install Stack
      uses: haskell-actions/setup@v2
      with:
        ghc-version: '9.4.7'
        stack-version: 'latest'
        enable-stack: true

    - name: Set up Stack
      run: stack setup

    - name: Build dependencies
      run: stack build --only-dependencies

    - name: Build project
      run: stack build

    - name: Run tests
      run: stack test

    #- name: Review project
    #  run: |
    #    mkdir bin
    #    EXE=$(find $(stack path --local-install-root)/bin -type f)
    #    PGM=${{github.event.repository.name}}
    #    VSN=${{github.ref_name}}
    #    PFM=${{matrix.platform}}
    #    ART=$PGM-$VSN-$PFM
    #    #
    #    echo
    #    echo exe: $EXE
    #    echo ast: $ART
    #    echo list exe
    #    ls -l $EXE
    #    echo ---
    #    echo copy exe as ass
    #    cp $EXE $ART
    #    ls -al
    #    echo "artefact=$ART" >> $GITHUB_ENV

    #- name: Upload executable
    #  uses: actions/upload-artifact@v4
    #  with:
    #    name: ${{github.event.repository.name}}-${{github.ref_name}}-${{matrix.platform}}
    #    path: ${{env.artefact}}

    #outputs:
    #    artifact_paths: ${{env.artefact}}

    - name: Locate binary
      shell: bash
      run: |
        BIN=$(stack path --local-install-root)/bin
        ART=${{github.event.repository.name}}-${{github.ref_name}}-${{matrix.platform}}
        ls $BIN
        case ${{matrix.os}} in
          ubuntu-latest)
            cp $BIN/${{github.event.repository.name}}-exe $ART
            echo artefact=$ART >> $GITHUB_ENV;;
          macos-latest)
            cp $BIN/${{github.event.repository.name}}-exe $ART
            echo artefact=$ART >> $GITHUB_ENV;;
          windows-latest)
            cp $BIN/${{github.event.repository.name}}-exe.exe $ART.exe
            echo artefact=$ART.exe >> $GITHUB_ENV;;
        esac

    - name: Upload executable
      uses: actions/upload-artifact@v4
      with:
        name: ${{github.event.repository.name}}-${{github.ref_name}}-${{matrix.platform}}
        path: ${{env.artefact}}
        if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:

      - name: Download Linux executable
        uses: actions/download-artifact@v4
        with:
          name: ${{github.event.repository.name}}-${{github.ref_name}}-linux-x86_64
          path: ./artefacts/linux

      - name: Download MacOS executable
        uses: actions/download-artifact@v4
        with:
          name: ${{github.event.repository.name}}-${{github.ref_name}}-macos-x86_64
          path: ./artefacts/macos

      - name: Download Windows executable
        uses: actions/download-artifact@v4
        with:
          name: ${{github.event.repository.name}}-${{github.ref_name}}-macos-x86_64
          path: ./artefacts/windows

      - name: Set permissions
        run: |
          chmod +x ./artefacts/linux/*
          chmod +x ./artefacts/macos/*
          chmod +x ./artefacts/windows/*
          ls -l

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./artefacts/linux/*
            ./artefacts/macos/*
            ./artefacts/windows/*
          tag_name: ${{github.ref_name}}
          draft: false
          prerelease: false
          generate_release_notes: true
          token: ${{secrets.GITHUB_TOKEN}}
